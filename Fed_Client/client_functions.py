import ssl
import time
import socket
import pandas as pd
from models.model import FNN_BC, FNN_MC, LSTM_BC, LSTM_MC
from other import info_load, info_update, encrypt_file, decrypt_file
from tensorflow.keras.optimizers import Adam
from sklearn.model_selection import train_test_split


# İstemcinin sunucuya göndereceği API komutları için kullanılan fonksiyondur.
def client(komutlar):
    info = info_load()

    # Burada kendi kendine imzalı (Self-Signed) sertifikalar kullanıyoruz.
    # Bu da iletişimimizi SSL tabanlı ve dolayısıyla şifreli hale getiriyor.
    context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH, cafile='secrets/server.crt')
    context.check_hostname = False
    context.verify_mode = ssl.CERT_NONE

    # SSL bağlantı için hazırlıklar
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        with context.wrap_socket(sock, server_hostname=info["server_host"]) as ssock:
            # İstemci, sunucuya bağlanmaya çalışır.
            ssock.connect((info["server_host"], info["server_port"]))

            # Bu kısımda sunucuya bir API komutu gönderilir.
            # API komutu, client fonksiyonunun parametresinde belirtilen
            # komutlar değişkenindedir.
            ssock.send(komutlar.encode())

            # Sunucuya gönderilen API komutunun cevabı response değişkenindedir.
            response = ssock.recv(1024).decode()

            # Sunucudan gelen round_num değerine göre
            # güncel globel model talep edilir.
            if "ROUND_NUM_GET:" in response:
                temp_round = response.split(":")
                # Sunucudaki round_num değeri ile istemcideki round_num değeri eşleşiyorsa
                # güncel global model, sunucudan talep edilir.
                if int(temp_round[1]) >= info["round_num"]:
                    print("--------------------------")
                    print(f"Client {info['user_no']}, yeni GLOBAL modeli FL-Server'dan talep ediyor... (Requesting)")
                    # GET_MODEL API komutu ile sunucudan en güncel global model dosyası talep edilir.
                    ssock.send(f"KOMUT {info['user_no']} {info['api_key']} GET_MODEL".encode())

                    model_data = b''
                    while True:
                        chunk = ssock.recv(1024)
                        if not chunk:
                            break
                        model_data += chunk

                    # Sunucudan gönderilen güncel model şifreli bir dosyada gönderildiği için,
                    # bu dosyanın çözülmesi gerekir.
                    with open(f"{info['global_model_enc_prefix']}.weights.h5", "wb") as f:
                        f.write(model_data)
                    print(f"Client {info['user_no']}, şifrelenmiş GLOBAL modeli yükledi. (Downloaded)")

                    # Şifreli global model dosyası çözülür.
                    decrypt_file(f"{info['global_model_enc_prefix']}.weights.h5",
                                 f"{info['global_model_prefix']}.weights.h5")
                    print(f"Client {info['user_no']}, şifrelenmiş GLOBAL modeli çözdü. (Decrypted)")
                    return 1

                else:
                    # Sunucu - İstemci arasında, round_num değerinin eşleşmemesi durumunda çalışır.
                    local_model_gonderilemedi(temp_round[1], info["round_num"])
                    return 0

            # Sunucudan gelen round_num değerine göre
            # yerel model sunucuya gönderilir.
            elif "ROUND_NUM_POST:" in response:
                temp_round = response.split(":")
                # Sunucudaki round_num değeri ile istemcideki round_num değeri eşleşiyorsa
                # yerel model sunucuya gönderilir.
                if int(temp_round[1]) >= info["round_num"]:
                    print(f"Client {info['user_no']}, yeni LOCAL modelini gönderiyor... (Sending)")
                    # POST_MODEL API komutu ile şifreli yerel model dosyası sunucuya gönderilir.
                    ssock.send(f"KOMUT {info['user_no']} {info['api_key']} POST_MODEL".encode())

                    with open(f"{info['local_model_enc_prefix']}.weights.h5", "rb") as f:
                        while True:
                            data = f.read(1024)
                            if not data:
                                break
                            ssock.send(data)
                    print(f"Client {info['user_no']}, yeni LOCAL modelini gönderdi! (Uploaded)")
                    print("--------------------------")

                    # Yerel modelini sunucuya gönderen istemci, artık bir sonraki tura geçmiştir.
                    # Sunucu da bir sonraki tura geçene kadar, yerel modelini sunucuya gönderemez!
                    info['round_num'] = int(temp_round[1]) + 1
                    info_update(info)
                    return True

                else:
                    local_model_gonderilemedi(temp_round[1], info["round_num"])
                    return False


# Parametresinde verilen send_time saniyede bir
# benzer işlemleri gerçekleştiren fonksiyondur.
def tekrarla(send_time):
    # client_main.json dosyasındaki ayarlar yüklenir.
    info = info_load()

    # CIC-MalMem-2022 veri seti
    df = pd.read_csv(info['csv_file'])
    X = df.iloc[:, 0:-1].values
    y = df.iloc[:, -1:].values

    while True:
        info = info_load()
        sonuc = client(f"KOMUT {info['user_no']} {info['api_key']} CHECK_ROUND_GET")

        if sonuc:
            print(f"Client {info['user_no']}, yeni LOCAL modelini eğitiyor... (Fitting)")

            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=info['csv_test_size'], stratify=y)
            optimizer = Adam(
                learning_rate=info['learning_rate'],
                beta_1=info['beta_1'], beta_2=info['beta_2'],
                epsilon=info['epsilon']
            )

            # FNN
            if info['arc_type'] == 0:
                if info['class_type'] == 0:
                    model = FNN_BC().build()
                else:
                    model = FNN_MC().build()
            # LSTM
            else:
                # LSTM için verinin boyutu değiştirilmelidir. (rows num, time-step, features num)
                X_train = X_train.reshape((X_train.shape[0], 1, X_train.shape[1]))

                if info['class_type'] == 0:
                    model = LSTM_BC().build()
                else:
                    model = LSTM_MC().build()

            model.compile(loss=info['loss'], optimizer=optimizer, metrics=info['metrics'])

            # Sunucudan alınan global modelin katsayıları ile geçici yerel bir model oluşturulur.
            model.load_weights(f"{info['global_model_prefix']}.weights.h5")

            # Oluşturulan geçici yerel modelin üstüne yeni verilerle eğitim gerçekleştirilerek
            # yerel model güncellenir.
            model.fit(X_train, y_train, batch_size=info['batch_size'], epochs=info['epochs'], verbose=info['verbose'])
            # Yerel model dosyası local_model_prefix'te belirtilen dizine kaydedilir.
            model.save_weights(f"{info['local_model_prefix']}.weights.h5")
            # Yerel model dosyası local_model_enc_prefix'te belirtiken dizinde şifrelenir.
            encrypt_file(f"{info['local_model_prefix']}.weights.h5", f"{info['local_model_enc_prefix']}.weights.h5")
            # Yerel model sunucuya gönderilmeden önce, yeniden round_num sorgulaması yapılır.
            client(f"KOMUT {info['user_no']} {info['api_key']} CHECK_ROUND_POST")
            # Sunucudaki round_num değeri ile istemcideki round_num değeri eşleşiyorsa,
            # şifrelenmiş güncel yerel model dosyası, sunucuya gönderilir.
            # Bu işlemler client fonksiyonunda gerçekleşir.

        else:
            print(f"LOCAL model gönderimi, {send_time} saniye sonra tekrar denenecek... (Retry)")
            print("--------------------------")

        # send_time saniye kadar, hiçbir işlem yapılmaz.
        time.sleep(send_time)


# Sunucudaki round_num ile istemcideki round_num eşleşmediğinde,
# konsola bilgi vermek için kullanılır.
def local_model_gonderilemedi(gr, lr):
    print(f"GLOBAL_ROUND = {gr} ve LOCAL_ROUND = {lr} olduğu için LOCAL model gönderilemedi!")
