import os
import json
from cryptography.fernet import Fernet

# Sunucu yazılımındaki other.py dosyasının,
# İstemci yazılımındaki other.py dosyası ile tek farkı bu satırdır.
json_file = 'server_main.json'


# Herhangi bir JSON dosyasının,
# python içinde kullanılabilir bir nesneye dönüştürülmesi için kullanılır.
def load_json_file(file):
    with open(file, "r") as f:
        nesne = json.load(f)
    return nesne


# Herhangi bir JSON dosyasının içeriğinin güncellenmesi için kullanılır.
def update_json_file(file, info):
    with open(file, "w") as f:
        json.dump(info, f, indent=4)


# server_main.json dosyasının ayarlarının yüklenmesi için kullanılır.
def info_load():
    return load_json_file(json_file)


# server_main.json dosyasındaki ayarların güncellenmesi için kullanılır.
def info_update(info):
    update_json_file(json_file, info)


# Bir dosyanın, "secrets/cipher.key" dizinindeki dosyada bulunan
# gizli bir anahtar ile şifrelenmesini sağlayan fonksiyondur.
def encrypt_file(input_file, output_file):
    with open('secrets/cipher.key', 'rb') as key_file:
        loaded_key = key_file.read()

    cipher = Fernet(loaded_key)
    with open(input_file, 'rb') as f:
        file_data = f.read()

    encrypted_data = cipher.encrypt(file_data)
    with open(output_file, 'wb') as f:
        f.write(encrypted_data)


# Bir dosyanın, "secrets/cipher.key" dizinindeki dosyada bulunan
# gizli bir anahtar ile şifresinin çözülmesini sağlayan fonksiyondur.
def decrypt_file(input_file, output_file):
    with open('secrets/cipher.key', 'rb') as key_file:
        loaded_key = key_file.read()

    cipher = Fernet(loaded_key)
    with open(input_file, 'rb') as f:
        encrypted_data = f.read()

    decrypted_data = cipher.decrypt(encrypted_data)
    with open(output_file, 'wb') as f:
        f.write(decrypted_data)

    return output_file


# Belli bir dizindeki tüm dosyaları silmek için kullanılır.
def remove_files(dizin):
    for dosya in os.listdir(dizin):
        dosya_yolu = os.path.join(dizin, dosya)

        try:
            os.remove(dosya_yolu)
        except Exception as e:
            print(f"HATA: Dosya silinemedi! >> {e} - {dosya_yolu}")
